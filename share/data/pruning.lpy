__revision__ = " $Id$ "
import random
import os
from math import acos, pi
import copy
import time
from openalea.fractalysis.light.directLight import diffuseInterception
from openalea.plantgl.all import Sphere, Viewer, Box, Frustum

from openalea.plantik.simulation.simulation import Simulation
from openalea.plantik.tools.config import ReadConfigFile

import openalea.plantik.biotik.root as root; reload(root)
import openalea.plantik.biotik.internode; reload(openalea.plantik.biotik.internode)
import openalea.plantik.biotik.leaf; reload(openalea.plantik.biotik.leaf)
import openalea.plantik.biotik.apex; reload(openalea.plantik.biotik.apex)
import openalea.plantik.biotik.plant; reload(openalea.plantik.biotik.plant)
import openalea.plantik.tools.lstring; reload(openalea.plantik.tools.lstring)
import openalea.plantik.biotik.branch; reload(openalea.plantik.biotik.branch)
import openalea.plantik.biotik.growthunit; reload(openalea.plantik.biotik.growthunit)
import openalea.plantik.plants.allocation; reload(openalea.plantik.plants.allocation)

from openalea.plantik.plants.allocation import Allocation
from openalea.plantik.biotik.internode import Internode
from openalea.plantik.biotik.leaf import Leaf
from openalea.plantik.biotik.apex import Apex
from openalea.plantik.biotik.plant import Plant
from openalea.plantik.biotik.branch import Branch
from openalea.plantik.tools.lstring import lstring_extract
from openalea.plantik.biotik.growthunit import GrowthUnit

from openalea.plantik.tools.colors import Colors

from openalea.stocatree.tools.surface import leafSurface
from openalea.mtg.io import axialtree2mtg, mtg2axialtree
import openalea.mtg.traversal as traversal

from math import sqrt
from heapq import heappush, heappop
import datetime



counter = 0
RATIO = 50.

stride_number = 10
leaf_surface = leafSurface(stride_number, stride_number)

colors = Colors()

from openalea.plantik import get_shared_data
options = ReadConfigFile(get_shared_data('pruning.ini'))

#set bg color
bg = tuple(options.viewer.background.split(','))
Viewer.frameGL.setBgColor(int(bg[0]), int(bg[1]), int(bg[2]))
Viewer.grids.setXYPlane(options.viewer.xygrid)
Viewer.grids.setYZPlane(options.viewer.yzgrid)
Viewer.grids.setXZPlane(options.viewer.xzgrid)

# create calendar instance      
simulation = Simulation(dt=options.general.time_step, starting_date=options.general.starting_year)

RESERVE = 0.
plant = Plant(options.general.time_step, options=options, revision=__revision__,  
                pipe_fraction=1, tag=options.general.tag)

scales = {'A':4,'I':4,'L':4, 'P':1, 'B':2, 'U':3}
parameters = {'A': ['Apex'], 'I': ['Internode'],  'L': ['Leaf'],'P':['Plant'], 'U':['GrowthUnit'], 'B':['Branch']}

module P(Plant): scale=1
module B(Branch): scale=2
module U(GrowthUnit): scale=3
module A(Apex): scale=4
module I(Internode) : scale=4
module L(Leaf): scale=4

global time1

def Start():
  global options
  global time1
  global allocation
  global plant
  plant.options.context.order_coeff = options.context.order_coeff
  plant.options.context.age_coeff = options.context.age_coeff
  plant.options.context.height_coeff = options.context.height_coeff
  plant.options.context.vigor_coeff = options.context.vigor_coeff


  allocation = Allocation(options.allocation.model, 
                          simulation.calendar.dt.days, 
                          perturbation=options.allocation.perturbation)
  time1 = time.time()
  from openalea.plantgl.all import Texture2D, ImageTexture
  context().turtle.setMaterial(7,Texture2D(image=ImageTexture(filename=get_shared_data('appletree_texture_sym.jpg')),))
  context().turtle.setMaterial(8,Texture2D(image=ImageTexture(filename=get_shared_data('apple_leaf_texture.jpg')),))


def StartEach():
  pass

def EndEach(lstring, scene):
  global allocation
  dt = simulation.calendar.dt.days
  if len(lstring)>=options.general.max_elements:
    print 'Naximum number of elements reached %s' % (options.general.max_elements)
    Stop()
    End(lstring, scene)

  if options.general.verbose:
    print simulation.date, getIterationNb()
    

  global RESERVE
  simulation.advance()  
  plant.simulation = simulation
  if 1==0:
    pass
  else:
    # Save Lstring
    # Save MTG
    
    # update
    mtg = axialtree2mtg(lstring, scales, scene, parameters)
    plant.mtgtools.mtg = mtg
    plant.update(simulation.time_elapsed.days, lstring)
    #plant.mtg = 

    # compute allocated resources according to the individual demand (proportional model)
    allocatedResources = 0
    cumulatedAllocatedResources = 0
    allocatedResources = allocation.compute_allocation(lstring, plant.R)
    plant.R -= allocatedResources

    res = 0
    plant.reserve.append(res)
    RESERVE+=res
    plant.RESERVE.append(RESERVE)

    plant.DARC.A.append(allocatedResources)
    plant.allocated.append(cumulatedAllocatedResources)



    # hack to keep top and bottom of the first internode equal (cylinder shape). requires to have one internode at least
    #lstring[0][0].radius = lstring[1][0].radius

    # store some data related to the apex
    try:
      if lstring[-1][0].id==2:
        data.apex['allocated'].append(lstring[-1][0].allocated)
        data.apex['height'].append(lstring[-1][0].height)
        data.apex['age'].append(lstring[-1][0].age.days)
        data.apex['demand'].append(lstring[-1][0].demand)
    except:
      pass


    coeff = options.pipe.model_coeff
    if options.pipe.model=='strand_final_only':
      if options.general.max_step-2==getIterationNb():
        options.pipe.model = 'strand'
    
    #strand = particular case of vinci where all r_i are identical at the highest level.
    if options.pipe.model=='strand':      
      strands = {}
      #TODO use correct pipe model!!!
      for vid in traversal.post_order(mtg1, 4):
          strands[vid] = max(sum([strands[c] for c in mtg1.children(vid) if mtg1.class_name(c) in ['I']]), 1)
      diameters = {}
      # default value of internode radius
      default_radius = Internode.radius_min
      for vid, s in strands.iteritems():
          diameters[vid] = default_radius * pow(s, 1./coeff)
          if mtg1.class_name(vid)=='I':
              mtg1.property('Internode')[vid].radius = diameters[vid]    
    elif options.pipe.model=='vinci':
       diameters = {}
       temp = {'I':'Internode', 'L':'Leaf'}
       for vid in traversal.pre_order(plant.mtg, 4):
           diameters[vid] = pow(sum([max(plant.mtg.property(temp[plant.mtg.class_name(c)])[c].radius,0.001)**coeff  for c in plant.mtg.children(vid) if plant.mtg.class_name(c) in ['I', 'L']]), 1./coeff)
           #print 'vid', vid, diameters[vid], [mtg1.property(temp[mtg1.class_name(c)])[c] for c in mtg1.children(vid) if mtg1.class_name(c) in ['I', 'L']]
       for vid, s in diameters.iteritems():
           if plant.mtg.class_name(vid) in ['I']:
             plant.mtg.property('Internode')[vid].radius = diameters[vid]

    elif options.pipe.model=='vinci2':

        radius = {}
        temp = {'I':'Internode', 'L':'Leaf'}
        for vid in traversal.pre_order(plant.mtg, 4):
           radius[vid] = pow(
                           sum(
                             [ (plant.mtg.property(temp[plant.mtg.class_name(c)])[c].radius)**coeff  
                               for c in plant.mtg.children(vid) if plant.mtg.class_name(c) in ['I', 'L'] 
                               ]
                               ),
                               1./coeff)
        for vid, s in radius.iteritems():
           if plant.mtg.class_name(vid) in ['I']:
              # max to prevent radius to shrink
              plant.mtg.property('Internode')[vid].target_radius = max(radius[vid], plant.mtg.property('Internode')[vid].target_radius)
    elif options.pipe.model==None:
      pass
    else:
      pass
      print 'pipe model %s provided not correct (try strand)' % options.pipe.model
    # light interception ?
    if options.misc.light_interception:
      Viewer.redrawPolicy = False
      Viewer.display(scene)
      pos,h,up = Viewer.camera.getPosition()
      res = diffuseInterception(scene)
      leaves = {}
      for k,v in res.items():
         try:
           if lstring[k].name == 'L':
             lstring[k][0].lg = v
         except:
            pass
      Viewer.redrawPolicy = False
      Viewer.camera.lookAt(pos,pos+h)      
      Viewer.redrawPolicy = True

    # required for the homomorphism to nicely represent the first
    # element as a cylinder with same base and top radius until a
    # better solution is found
    #try:
    #   lstring[0][0].radius = lstring[1][0].radius
    #except:
    #   pass
    
    # anothor homomorphism trick: the leaf must be shifted to fit the
    # internode radius on which they are put. Similarly for the apices
    #account for 5% of CPU
    if options.geometry.realistic_petiole == True:
        from openalea.mtg.algo import father
        for ids in plant.mtgtools.ids['L']:
            id = father(plant.mtg, ids)
            plant.mtg.property('Leaf')[ids].father_radius = plant.mtg.property('Internode')[id].radius
        for ids in plant.mtgtools.ids['A']:
            #try:
            id = father(plant.mtg, ids)
            if id:
              plant.mtg.property('Apex')[ids].father_radius = plant.mtg.property('Internode')[id].radius
            #except:
            #  pass

    useGroup(1)


def End(lstring, scene):
    global time1
    global plant
    time2 = time.time()
    plant.duration = time2-time1

    if options.general.verbose:
        print 'Simulation took %s.' % (time2-time1), ' Creating figures...'
    plant.lstring = lstring_extract(lstring, labels=['L', 'P', 'A','I', 'B', 'U'])
    #,'Apex','Internode', 'Leaf'])
    #print plant.lstring

    scene.save('/tmp/test.bgeom')
    scene.save('/tmp/test.geom')
    
    if options.general.fast == True:
      # not need to save anything
      return 
    plant.mtg.properties()['geometry']={}
    import pickle
    pickle.dump(plant, open("pruning_" + options.general.tag +'_data.dat','w'))
    import openalea.plantik.tools.post_analysis

    if options.misc.post_analysis is True:
        from openalea.plantgl.all import Viewer
        Viewer.frameGL.saveImage(options.general.filename_prefix+'_viewer_final_time.png')
        import openalea.plantik.tools.post_analysis as post_analysis
        post_analysis.single_plots(plant, "pruning_" + options.general.tag )
        print 'Figures saved'
    
    #from openalea.mtg.io import write_mtg
    #res = write_mtg(mtg1, class_at_scale=scales)
    #outputmtg = open(options['filename_prefix'] + '.mtg', 'w')
    #outputmtg.write(res)
    #outputmtg.close()


#place this "SetColor(7) @Gc: before B for an extruded version

Axiom: P(plant)  B(Branch(min_radius=0.001)) U(GrowthUnit(min_radius=0.001))  A(Apex(demand=options.apex.demand,id=2, birthdate=simulation.date, plastochron=options.apex.plastochron, store_data=options.apex.store_data, growth_threshold=options.apex.growth_threshold))

derivation length: int(options.general.max_step)

ignore: +/
production:

group 1: # vegetative growth (spring/summer)


L(l):
  
  if (simulation.date.month*30 + simulation.date.day) > 100000:
    produce *
  
  
A(a):
  dt = simulation.calendar.dt.days
  a.update(dt)
  global plant
  
  # if we want to restrict the maximum order, we do nothing but
  # we need to move the allocated resources to the global pool
  if a.context.order>options.misc.order_max:
    a.initial_demand = 0
    plant.R+=a.allocated
    a.allocated = 0.
    a.growing = False
    produce A(a)  
  
  # if current plastochorn of the apex is less than plastochron
  # nothing to be done, otherwise, reset the internal plastochron anc continue
  #todo <= or < ?
  if a.current_plastochron <= options.apex.plastochron:
    a.growing = False
    produce A(a)    
  else:        
    a.current_plastochron = dt
    
  
  if a.allocated > a.demand:
    a.vigor +=0.1
    if a.vigor>=1:
      a.vigor=1.
  else:
    a.vigor-=0.1
    if a.vigor<=0:
      a.vigor=0.1
  
  
  # since we have reached plastochron, we check if there is enough allocated R
  if a.allocated<=a.growth_threshold:
    if options.misc.reset_resource:
        plant.R += a.allocated
        a.allocated = 0.
    a.growing = False
    produce A(a)
  else:
    demand = 0.33
    allocation = min(1, a.allocated)
    a.allocated -= allocation
    vigor = max(min(1,a.allocated),0.1)
    
    
    # Create new internode, leaf and apex 
    # First, the internode with the internode's length 
    # the default internode's radius is use to compute the length of this internode given the growth_threshold/allocated resources.
    length=allocation/Internode.cost_per_metamer/pi/Internode.radius_min/Internode.radius_min
    #print a.allocated, allocation, length, Internode.cost_per_metamer
    # update distance in meters from the root
    a.height+=min(0.03, length)
    internode_args = {
      'length_max': length,
      'cambial_fraction':options.internode.cambial_fraction,
      'birthdate':simulation.calendar.date,
      'store_data':options.internode.store_data
      }
        
    apex_args = {
      'vigor':vigor,
      'demand': demand,
      'height': length,
      'plastochron':a.plastochron,
      'birthdate':simulation.calendar.date,
      'store_data':options.apex.store_data,
      'growth_threshold':options.apex.growth_threshold
      }
    leaf_args = {
      'resource_per_day':options.leaf.resource,
      'maturation':options.leaf.maturation,
      'growth_function':options.leaf.growth_function,
      'efficiency_method':options.leaf.efficiency_method,
      'internode_vigor': length/Internode.length_max,
      'birthdate':simulation.calendar.date,
      'store_data':options.leaf.store_data,
      'nu':0.5
      }
      
    branch_args = {
      'birthdate':simulation.calendar.date,      
    }
    growth_unit_args = {
      'birthdate':simulation.calendar.date,      
    }
    
    # print a.interruption , a.growing
    # the first apex is has interruption = 0 at the beginnin of the simulation
    # since the axiom is BUA, we do not want to redo BU in that particular case
    if a.internodes_created == 0 and a.context.order!=0 and a.context.height!=1:
        nproduce B(Branch(**branch_args)) U(GrowthUnit(**growth_unit_args))
    else:
        # else, if the apex has already grown but has stopped, we only want to add a U
        # if time of interruption > latency
        if a.interruption >= options.growth_unit.latency and a.growing == False:
            # then we've been in a latent state. Since, we are going to grow again, 
            # UC must be added
            #if a.internodes == 0:
            #    nproduce B(Branch(**branch_args))
            nproduce U(GrowthUnit(**growth_unit_args))
      
      
      
    if options.geometry.symmetric_tree:
        nproduce I(Internode(**internode_args)) [L(Leaf(**leaf_args))] [&(options.geometry.branching_angle)  A(Apex(**apex_args))][&(-options.geometry.branching_angle)  A(Apex(**apex_args))]
    else:
        nproduce I(Internode(**internode_args)) [L(Leaf(**leaf_args))] [&(options.geometry.branching_angle)  A(Apex(**apex_args))]
    
    # keep track of the fact that this apex is growing.
    a.internodes_created += 1  
    a.growing = True
    a.interruption = 0
    #end of production
  
  if options.misc.reset_resource:
    plant.R+=a.allocated
    a.allocated = 0.
    
  produce A(a)
    


endgroup


group 0:
R(r):
  r.update(simulation.calendar.dt.days)
  produce R(r)
  
I(i):
  i.update(simulation.calendar.dt.days)
  produce I(i)
  
L(l):
  l.update(simulation.calendar.dt.days)
  produce L(l)


U(u):
  u.update(simulation.calendar.dt.days)
  produce U(u)
  
B(b):
  b.update(simulation.calendar.dt.days)
  produce B(b)
  
# module to allow interactive pruning
X:
  produce Cut()
endgroup



homomorphism:

A(a):
    if options.general.colorcode=='order':
      colorcode = a.context.order+11
    elif options.general.colorcode=='normal':
      colorcode = 5 
    elif options.general.colorcode=='allocated':
      colorcode = 10 + int(a.allocated/a.initial_demand*10.)
    elif options.general.colorcode=='vigor':
      colorcode = 10 + int(a.vigor*10.)
    elif options.general.colorcode=='length':
      colorcode = 5
    elif options.general.colorcode=='test':
      colorcode=5
    else:
      raise ValueError('colorcode in config.ini must be in normal, order')
    produce SetColor(colorcode) +(90)  f(options.geometry.radius_scale*a.father_radius*RATIO+a.radius) +(-90)    Sphere(max(0.4, a.allocated)/300. * RATIO) 
    #Label('   ' +str(
I(i):
  
    if options.general.colorcode=='order':
      colorcode = i.context.order+11
    elif options.general.colorcode=='normal':
      if options.geometry.texture == True:
        colorcode = 7
      else:
        colorcode = 1
    elif options.general.colorcode =='allocated':
      colorcode = 1
    elif options.general.colorcode=='length':
      colorcode = int(i.length/Internode.length_max *10) +10
    elif options.general.colorcode=='vigor':
        colorcode = 1
  
    elif options.general.colorcode=='test':
      if i.order==0:
        colorcode=11
      elif i.order==1:
        colorcode=13
      elif i.order==2:
        colorcode=15
      elif i.order==3:
        colorcode=17
      else:
        colorcode=17
  
        
    else:
      raise ValueError('colorcode in config.ini must be in normal, order')
      
      
    #nproduce SetColor(colorcode) TextureScale(3.14*i.radius*RATIO*options.geometry.radius_scale,i.length*RATIO) TextureRotation(0, -137.5*(i.context.path+1),0)
    nproduce SetWidth(i.radius*RATIO*options.geometry.radius_scale)
    h = i.context.rank
    if h == None: h=0
    nproduce SetColor(colorcode) TextureScale(1,1) TextureTranslation(137.5/180*3.14*h,0)
    #todo ideally the textture should be aligned maybe with TextureTranslation()
    if options.tropism.tropism:
      nproduce @Tp(0,0,-options.tropism.z_tropism) @Ts(options.tropism.elasticity)
    nproduce +(1) F(i.length*RATIO, i.radius*RATIO*options.geometry.radius_scale) 
    nproduce RollL(options.geometry.phyllotactic_angle)


L(c):
    #leaf
    if options.misc.light_interception is True:
      norm = 0.08
      #print (c.size/c.leaf_max_area),  c.lg/norm ,  (0.0030/c.leaf_max_area)
      
      color = int(53. - (53-36.) * (c.area/c.area_max) * c.lg/norm * (0.0030/c.area_max))
      #print 'llllgggg', c.lg, c.size, c.size/c.leaf_max_area, color
      if color<=35 : print 'color', color
      if color>=54 : print 'color', color
      
      if c.lg > norm:
        print 'light interception', color, c.lg
    else:
      color = 8
    if options.geometry.leaf_view == True:
      #produce SetColor(color) +(90)  ~l(0.8*c.size*10.*RATIO) +(-90) +(options.geometry.branching_angle)
      if c.age.days>200:
        pass
        #produce Cut()
      else:
        #vertical -> theta=0;  horizontal theta=90
        theta = 90
        # apex and leaf at the same place use phi=0
        phi = 0.
        from openalea.plantgl.all import Shape
        
        produce SetColor(color) +(theta)^(phi) SetWidth(options.geometry.leaf_petiole_radius*RATIO) f(c.father_radius*RATIO*options.geometry.radius_scale) F(options.geometry.leaf_petiole_length*RATIO*c.internode_vigor) PglShape(leaf_surface, options.geometry.leaf_surface_ratio*c.area*RATIO) -(theta) ^(-phi) 
          #produce SetColor(color)+(60) RollToVert()      -(60) +(branching_angle)

B(b):
    if options.geometry.branch_view:
        # this is to prevent F to have different base and top radius
        nproduce SetWidth(b.radius*RATIO*options.geometry.radius_scale)
        nproduce SetColor(12) F(1, b.radius*RATIO*options.geometry.radius_scale)

U(u):
    if options.geometry.growth_unit_view:
        nproduce SetColor(3)F(.5, u.radius*RATIO*options.geometry.radius_scale)
    
#P(p):
#nproduce  F(0.01,p.radius*RATIO*options.geometry.radius_scale)


#Wall:
#    produce [;(6)[@M(-10,0,15)@g(Box(15,0.5,15))][@M(5,0,30)@g(Box(15,15,0.5))][@M(20,0,15)@g(Box(15,0.5,15))][@M(5,15,15)@g(Box(0.5,15,15))][@M(5,-15,5)]]

endlsystem

###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	from openalea.plantgl.scenegraph import Material, Texture2D, ImageTexture,Color3
	context.turtle.setMaterial(5,Material(name='Default',ambient=Color3(3,5,2),diffuse=32,))
	context.turtle.setMaterial(6,Material(name='Default',ambient=Color3(0,0,0),))
	context.turtle.setMaterial(7,Texture2D(name='APPID_3_195328248',image=ImageTexture(filename='''/home/cokelaer/Work/virtualplants/trunk/vplants/plantik/share/data/appletree_texture_sym.jpg'''),))
	context.turtle.setMaterial(8,Texture2D(name='APPID_5_196508344',image=ImageTexture(filename='''/home/cokelaer/Work/virtualplants/trunk/vplants/plantik/share/data/apple_leaf_texture.jpg'''),))
	context.turtle.setMaterial(11,Material(name='Default',ambient=Color3(0,0,134),diffuse=0.402985,specular=Color3(67,67,67),emission=Color3(29,29,29),))
	context.turtle.setMaterial(12,Material(name='APPID_6_201601160',ambient=Color3(31,1,119),diffuse=0.431929,specular=Color3(63,63,63),emission=Color3(25,25,25),))
	context.turtle.setMaterial(13,Material(name='APPID_11_201482848',ambient=Color3(62,2,104),diffuse=0.460873,specular=Color3(60,60,60),emission=Color3(21,21,21),))
	context.turtle.setMaterial(14,Material(name='APPID_16_193040056',ambient=Color3(93,3,89),diffuse=0.489817,specular=Color3(56,56,56),emission=Color3(18,18,18),))
	context.turtle.setMaterial(15,Material(name='APPID_21_201559576',ambient=Color3(124,5,74),diffuse=0.518762,specular=Color3(53,53,53),emission=Color3(14,14,14),))
	context.turtle.setMaterial(16,Material(name='APPID_26_179610280',ambient=Color3(155,6,59),diffuse=0.547706,specular=Color3(50,50,50),emission=Color3(10,10,10),))
	context.turtle.setMaterial(17,Material(name='APPID_31_197890624',ambient=Color3(186,7,44),diffuse=0.57665,specular=Color3(46,46,46),emission=Color3(7,7,7),))
	context.turtle.setMaterial(18,Material(name='APPID_36_197919128',ambient=Color3(217,8,29),diffuse=0.605594,specular=Color3(43,43,43),emission=Color3(3,3,3),))
	context.turtle.setMaterial(19,Material(name='Default',ambient=Color3(249,10,14),diffuse=0.634538,))
	context.turtle.setMaterial(20,Material(name='Default',ambient=Color3(206,1,5),diffuse=0.776699,))
	context.turtle.setMaterial(36,Material(name='Default',ambient=Color3(0,218,32),diffuse=0.733945,))
	context.turtle.setMaterial(37,Material(name='APPID_3_205259680',ambient=Color3(15,206,30),diffuse=0.72745,))
	context.turtle.setMaterial(38,Material(name='APPID_3_183101784',ambient=Color3(30,195,29),diffuse=0.720955,))
	context.turtle.setMaterial(39,Material(name='APPID_3_182883320',ambient=Color3(44,183,27),diffuse=0.71446,))
	context.turtle.setMaterial(40,Material(name='APPID_3_244823440',ambient=Color3(60,172,26),diffuse=0.707965,))
	context.turtle.setMaterial(41,Material(name='APPID_3_185117336',ambient=Color3(75,160,24),diffuse=0.70147,))
	context.turtle.setMaterial(42,Material(name='APPID_3_185117440',ambient=Color3(90,149,23),diffuse=0.694975,))
	context.turtle.setMaterial(43,Material(name='APPID_3_217219296',ambient=Color3(105,137,21),diffuse=0.68848,))
	context.turtle.setMaterial(44,Material(name='APPID_3_185117648',ambient=Color3(120,126,20),diffuse=0.681985,))
	context.turtle.setMaterial(45,Material(name='APPID_3_185104032',ambient=Color3(135,114,18),diffuse=0.675489,))
	context.turtle.setMaterial(46,Material(name='APPID_3_185104136',ambient=Color3(150,103,17),diffuse=0.668994,))
	context.turtle.setMaterial(47,Material(name='APPID_3_185104240',ambient=Color3(165,91,15),diffuse=0.662499,))
	context.turtle.setMaterial(48,Material(name='APPID_3_185104344',ambient=Color3(180,80,14),diffuse=0.656004,))
	context.turtle.setMaterial(49,Material(name='APPID_3_185104448',ambient=Color3(195,68,12),diffuse=0.649509,))
	context.turtle.setMaterial(50,Material(name='APPID_3_185104552',ambient=Color3(210,57,11),diffuse=0.643014,))
	context.turtle.setMaterial(51,Material(name='APPID_3_185137960',ambient=Color3(225,45,9),diffuse=0.636519,))
	context.turtle.setMaterial(52,Material(name='APPID_9_185138064',ambient=Color3(240,34,8),diffuse=0.630024,))
	context.turtle.setMaterial(53,Material(name='Default',ambient=Color3(255,23,7),diffuse=0.623529,))
	context.options.setSelection('Optimization',2)
	context.options.setSelection('Selection Always Required',1)
