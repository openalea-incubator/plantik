
# This file has been generated at Fri Oct 29 14:28:18 2010

from openalea.core import *


__name__ = 'vplants.plantik.test'

__editable__ = True
__description__ = 'to be done'
__license__ = 'CECILL-C'
__url__ = 'http://openalea.gforge.inria.fr/doc/openalea/pylab/doc/_build/html/contents.html'
__alias__ = []
__version__ = '0.8.0'
__authors__ = 'Thomas Cokelaer'
__institutes__ = 'INRIA/CIRAD'
__icon__ = 'icon.png'


__all__ = ['ConfigParams', 'GrowthFunction', 'ConfigParserSave', 'ConfigParserRead', 'ConfigParserGenerator']



ConfigParams = CompositeNodeFactory(name='ConfigParams',
                             description='',
                             category='Unclassified',
                             doc='',
                             inputs=[],
                             outputs=[],
                             elt_factory={  8: ('vplants.plantik.config', 'ConfigParserRead'),
   9: ('vplants.plantik.config', 'ConfigParams'),
   10: ('vplants.plantik.config', 'pruning.ini'),
   11: ('openalea.flow control', 'annotation'),
   12: ('openalea.flow control', 'annotation'),
   13: ('vplants.plantik.config', 'pruning.ini'),
   14: ('vplants.plantik.config', 'ConfigParams')},
                             elt_connections={  143822324: (10, 0, 9, 0), 143822336: (8, 0, 14, 0), 143822348: (13, 0, 8, 0)},
                             elt_data={  8: {  'block': False,
         'caption': 'ConfigParserRead',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xaa6d6ec> : "ConfigParserRead"',
         'hide': True,
         'id': 8,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -413.6283700440847,
         'posy': -221.52664580917082,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   9: {  'block': False,
         'caption': 'ConfigParams',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xaa6d70c> : "ConfigParams"',
         'hide': True,
         'id': 9,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -44.525972425313498,
         'posy': -207.48921794682374,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   10: {  'block': False,
          'caption': 'pruning.ini',
          'delay': 0,
          'factory': '<openalea.core.data.DataFactory object at 0xaa6d8cc> : "pruning.ini"',
          'hide': True,
          'id': 10,
          'lazy': True,
          'port_hide_changed': set([2]),
          'posx': -46.262239563353603,
          'posy': -300.56077030257586,
          'priority': 0,
          'use_user_color': False,
          'user_application': None,
          'user_color': None},
   11: {  'factory': '<openalea.core.node.NodeFactory object at 0xad180ac> : "annotation"',
          'id': 11,
          'posx': -126.43098926096373,
          'posy': -405.45110349205618,
          'txt': u'The same operation can be done \ndirectly'},
   12: {  'factory': '<openalea.core.node.NodeFactory object at 0xad180ac> : "annotation"',
          'id': 12,
          'posx': -483.53285109874753,
          'posy': -399.26146913463958,
          'txt': u'Read a ConfigParser and\nconvert it into a ConfigParams\nobject (which contains the original \nConfigParser instance)'},
   13: {  'block': False,
          'caption': 'pruning.ini',
          'delay': 0,
          'factory': '<openalea.core.data.DataFactory object at 0xaa6d8cc> : "pruning.ini"',
          'hide': True,
          'id': 13,
          'lazy': True,
          'port_hide_changed': set([2]),
          'posx': -373.50409129814858,
          'posy': -275.85890745138317,
          'priority': 0,
          'use_user_color': False,
          'user_application': None,
          'user_color': None},
   14: {  'block': False,
          'caption': 'ConfigParams',
          'delay': 0,
          'factory': '<openalea.core.node.NodeFactory object at 0xaa6d70c> : "ConfigParams"',
          'hide': True,
          'id': 14,
          'lazy': True,
          'port_hide_changed': set(),
          'posx': -381.88031640368263,
          'posy': -169.27533888996243,
          'priority': 0,
          'use_user_color': False,
          'user_application': None,
          'user_color': None},
   '__in__': {  'block': False,
                'caption': 'In',
                'delay': 0,
                'hide': True,
                'id': 0,
                'lazy': True,
                'port_hide_changed': set(),
                'posx': 0,
                'posy': 0,
                'priority': 0,
                'use_user_color': True,
                'user_application': None,
                'user_color': None},
   '__out__': {  'block': False,
                 'caption': 'Out',
                 'delay': 0,
                 'hide': True,
                 'id': 1,
                 'lazy': True,
                 'port_hide_changed': set(),
                 'posx': 0,
                 'posy': 0,
                 'priority': 0,
                 'use_user_color': True,
                 'user_application': None,
                 'user_color': None}},
                             elt_value={  8: [],
   9: [],
   10: [  (0, 'PackageData(vplants.plantik.config, pruning.ini)'),
          (1, 'None'),
          (2, 'None')],
   11: [],
   12: [],
   13: [  (0, 'PackageData(vplants.plantik.config, pruning.ini)'),
          (1, 'None'),
          (2, 'None')],
   14: [],
   '__in__': [],
   '__out__': []},
                             elt_ad_hoc={  8: {  'position': [-413.6283700440847, -221.52664580917082],
         'useUserColor': False,
         'userColor': None},
   9: {  'position': [-44.525972425313498, -207.48921794682374],
         'useUserColor': False,
         'userColor': None},
   10: {  'position': [-46.262239563353603, -300.56077030257586],
          'useUserColor': False,
          'userColor': None},
   11: {  'color': None,
          'position': [-126.43098926096373, -405.45110349205618],
          'rectP2': (-1, -1),
          'text': u'The same operation can be done \ndirectly',
          'textColor': None,
          'visualStyle': 1},
   12: {  'color': None,
          'position': [-483.53285109874753, -399.26146913463958],
          'rectP2': (-1, -1),
          'text': u'Read a ConfigParser and\nconvert it into a ConfigParams\nobject (which contains the original \nConfigParser instance)',
          'textColor': None,
          'visualStyle': 1},
   13: {  'position': [-373.50409129814858, -275.85890745138317],
          'useUserColor': False,
          'userColor': None},
   14: {  'position': [-381.88031640368263, -169.27533888996243],
          'useUserColor': False,
          'userColor': None},
   15: {  'position': [-402.94331307836018, -250.21141361099126],
          'useUserColor': False,
          'userColor': None},
   '__in__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None},
   '__out__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None}},
                             lazy=True,
                             eval_algo='LambdaEvaluation',
                             )




GrowthFunction = CompositeNodeFactory(name='GrowthFunction',
                             description='',
                             category='Unclassified',
                             doc='',
                             inputs=[],
                             outputs=[],
                             elt_factory={  2: ('vplants.plantik.biotik', 'GrowthFunction'),
   3: ('openalea.numpy.creation', 'arange'),
   4: ('openalea.pylab.plotting', 'PyLabPlot'),
   5: ('vplants.plantik.biotik', 'GrowthFunction'),
   6: ('vplants.plantik.biotik', 'GrowthFunction'),
   7: ('openalea.pylab.Axes decorators', 'PyLabGrid'),
   8: ('openalea.flow control', 'annotation')},
                             elt_connections={  143400388: (4, 0, 7, 0),
   143400400: (6, 0, 4, 1),
   143400412: (3, 0, 6, 0),
   143400424: (3, 0, 2, 0),
   143400436: (5, 0, 4, 1),
   143400448: (2, 0, 4, 1),
   143400460: (3, 0, 5, 0)},
                             elt_data={  2: {  'block': False,
         'caption': 'GrowthFunction',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xa9d010c> : "GrowthFunction"',
         'hide': True,
         'id': 2,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -543.98873884413933,
         'posy': -209.76402815182777,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   3: {  'block': False,
         'caption': 'arange',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xadd1bec> : "arange"',
         'hide': True,
         'id': 3,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -445.0,
         'posy': -314.0,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   4: {  'block': False,
         'caption': 'PyLabPlot',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xa3ea62c> : "PyLabPlot"',
         'hide': True,
         'id': 4,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -355.4978059794131,
         'posy': -96.102092962469968,
         'priority': 0,
         'use_user_color': False,
         'user_application': True,
         'user_color': None},
   5: {  'block': False,
         'caption': 'GrowthFunction',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xa9d010c> : "GrowthFunction"',
         'hide': True,
         'id': 5,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -372.9029595505242,
         'posy': -211.33165065538856,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   6: {  'block': False,
         'caption': 'GrowthFunction',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xa9d010c> : "GrowthFunction"',
         'hide': True,
         'id': 6,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -178.96502942136658,
         'posy': -208.74337479478424,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   7: {  'block': False,
         'caption': 'PyLabGrid',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xacbc1ec> : "PyLabGrid"',
         'hide': True,
         'id': 7,
         'lazy': False,
         'port_hide_changed': set(),
         'posx': -287.15442240705431,
         'posy': -47.650078827371459,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   8: {  'factory': '<openalea.core.node.NodeFactory object at 0xa5e9acc> : "annotation"',
         'id': 8,
         'posx': -339.19332428431528,
         'posy': -378.69273173332061,
         'txt': u'The different GrowthFuncion methods\n(linear, sigmoid, logistic)'},
   '__in__': {  'block': False,
                'caption': 'In',
                'delay': 0,
                'hide': True,
                'id': 0,
                'lazy': True,
                'port_hide_changed': set(),
                'posx': 0,
                'posy': 0,
                'priority': 0,
                'use_user_color': True,
                'user_application': None,
                'user_color': None},
   '__out__': {  'block': False,
                 'caption': 'Out',
                 'delay': 0,
                 'hide': True,
                 'id': 1,
                 'lazy': True,
                 'port_hide_changed': set(),
                 'posx': 0,
                 'posy': 0,
                 'priority': 0,
                 'use_user_color': True,
                 'user_application': None,
                 'user_color': None}},
                             elt_value={  2: [(1, "'sigmoid'"), (2, '0'), (3, '1'), (4, '1'), (5, '12'), (6, '1')],
   3: [(0, '0'), (1, '15.0'), (2, '1'), (3, "'float64'")],
   4: [  (0, 'None'),
         (2, 'None'),
         (3, "'circle'"),
         (4, '10'),
         (5, "'solid'"),
         (6, "'blue'"),
         (7, 'True'),
         (8, 'True'),
         (9, "{'label': None}"),
         (10, '1')],
   5: [  (  0,
            'array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,\n        11.,  12.,  13.,  14.])'),
         (1, "'logistic'"),
         (2, '0'),
         (3, '1'),
         (4, '1'),
         (5, '12'),
         (6, '0.70000000000000007')],
   6: [  (1, "'linear'"),
         (2, '0'),
         (3, '1'),
         (4, '1'),
         (5, '12'),
         (6, '0.70000000000000007')],
   7: [  (1, 'True'),
         (2, "'major'"),
         (3, "'dotted'"),
         (4, "'black'"),
         (5, '1.0'),
         (6, '{}')],
   8: [],
   '__in__': [],
   '__out__': []},
                             elt_ad_hoc={  2: {'position': [-543.98873884413933, -209.76402815182777], 'userColor': None, 'useUserColor': False},
   3: {'position': [-445.0, -314.0], 'userColor': None, 'useUserColor': False},
   4: {'position': [-355.4978059794131, -96.102092962469968], 'userColor': None, 'useUserColor': False},
   5: {'useUserColor': False, 'position': [-372.9029595505242, -211.33165065538856], 'userColor': None},
   6: {'useUserColor': False, 'position': [-178.96502942136658, -208.74337479478424], 'userColor': None},
   7: {'position': [-287.15442240705431, -47.650078827371459], 'userColor': None, 'useUserColor': False},
   8: {'visualStyle': 1, 'position': [-339.19332428431528, -378.69273173332061], 'color': None, 'text': u'The different GrowthFuncion methods\n(linear, sigmoid, logistic)', 'textColor': None, 'rectP2': (371.0, 131.91923349050461)},
   '__in__': {'position': [0, 0], 'userColor': None, 'useUserColor': True},
   '__out__': {'position': [0, 0], 'userColor': None, 'useUserColor': True}},
                             lazy=True,
                             eval_algo='LambdaEvaluation',
                             )




ConfigParserSave = CompositeNodeFactory(name='ConfigParserSave',
                             description='',
                             category='Unclassified',
                             doc='',
                             inputs=[],
                             outputs=[],
                             elt_factory={  2: ('vplants.plantik.config', 'pruning.ini'),
   3: ('openalea.flow control', 'annotation'),
   6: ('openalea.file', 'tmpnam'),
   7: ('vplants.plantik.config', 'ConfigParserRead'),
   8: ('vplants.plantik.config', 'ConfigParserSave')},
                             elt_connections={  152542708: (6, 0, 8, 0), 152542720: (7, 0, 8, 1), 152542732: (2, 0, 7, 0)},
                             elt_data={  2: {  'block': False,
         'caption': 'pruning.ini',
         'delay': 0,
         'factory': '<openalea.core.data.DataFactory object at 0xbc1dccc> : "pruning.ini"',
         'hide': True,
         'id': 2,
         'lazy': True,
         'port_hide_changed': set([2]),
         'posx': -42.891688870856797,
         'posy': -205.0,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   3: {  'factory': '<openalea.core.node.NodeFactory object at 0xb561a8c> : "annotation"',
         'id': 3,
         'posx': -444.40857556184517,
         'posy': -365.12658768359887,
         'txt': u'This dataflow shows how to read a config file\nand how to save a config file.\n\nThe ReadConfigParser node returns an instance of \nConfigParser, which can be save with the SaveConfigParser\nnode'},
   6: {  'block': False,
         'caption': 'filename (tmpnam)',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xb2e7f8c> : "tmpnam"',
         'hide': True,
         'id': 6,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -316.82627268673292,
         'posy': -181.27041817220174,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   7: {  'block': False,
         'caption': 'ConfigParserRead',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1dbac> : "ConfigParserRead"',
         'hide': True,
         'id': 7,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -82.774636338181153,
         'posy': -108.52674542117083,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   8: {  'block': False,
         'caption': 'ConfigParserSave',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1db2c> : "ConfigParserSave"',
         'hide': True,
         'id': 8,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -299.214981726166,
         'posy': -57.635672709548345,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   '__in__': {  'block': False,
                'caption': 'In',
                'delay': 0,
                'hide': True,
                'id': 0,
                'lazy': True,
                'port_hide_changed': set(),
                'posx': 0,
                'posy': 0,
                'priority': 0,
                'use_user_color': True,
                'user_application': None,
                'user_color': None},
   '__out__': {  'block': False,
                 'caption': 'Out',
                 'delay': 0,
                 'hide': True,
                 'id': 1,
                 'lazy': True,
                 'port_hide_changed': set(),
                 'posx': 0,
                 'posy': 0,
                 'priority': 0,
                 'use_user_color': True,
                 'user_application': None,
                 'user_color': None}},
                             elt_value={  2: [  (0, 'PackageData(vplants.plantik.config, pruning.ini)'),
         (1, 'None'),
         (2, 'None')],
   3: [],
   6: [],
   7: [],
   8: [],
   '__in__': [],
   '__out__': []},
                             elt_ad_hoc={  2: {  'position': [-42.891688870856797, -205.0],
         'useUserColor': False,
         'userColor': None},
   3: {  'color': None,
         'position': [-444.40857556184517, -365.12658768359887],
         'rectP2': (584.64260506897665, 361.84135386589674),
         'text': u'This dataflow shows how to read a config file\nand how to save a config file.\n\nThe ReadConfigParser node returns an instance of \nConfigParser, which can be save with the SaveConfigParser\nnode',
         'textColor': None,
         'visualStyle': 1},
   4: {  'position': [-177.66019870381979, -44.441714505354298],
         'useUserColor': False,
         'userColor': None},
   5: {  'position': [-70.418442459259609, -152.85400865165832],
         'useUserColor': False,
         'userColor': None},
   6: {  'position': [-316.82627268673292, -181.27041817220174],
         'useUserColor': False,
         'userColor': None},
   7: {  'position': [-82.774636338181153, -108.52674542117083],
         'useUserColor': False,
         'userColor': None},
   8: {  'position': [-299.214981726166, -57.635672709548345],
         'useUserColor': False,
         'userColor': None},
   '__in__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None},
   '__out__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None}},
                             lazy=True,
                             eval_algo='LambdaEvaluation',
                             )




ConfigParserRead = CompositeNodeFactory(name='ConfigParserRead',
                             description='',
                             category='Unclassified',
                             doc='',
                             inputs=[],
                             outputs=[],
                             elt_factory={  2: ('vplants.plantik.config', 'pruning.ini'),
   4: ('vplants.plantik.config', 'ConfigParserOptions'),
   5: ('vplants.plantik.config', 'ConfigParserSections'),
   6: ('openalea.data structure.string', 'string'),
   7: ('openalea.flow control', 'annotation'),
   8: ('vplants.plantik.config', 'ConfigParserRead')},
                             elt_connections={  152542696: (2, 0, 8, 0),
   152542708: (6, 0, 4, 1),
   152542720: (8, 0, 5, 0),
   152542732: (8, 0, 4, 0)},
                             elt_data={  2: {  'block': False,
         'caption': 'pruning.ini',
         'delay': 0,
         'factory': '<openalea.core.data.DataFactory object at 0xbc1dccc> : "pruning.ini"',
         'hide': True,
         'id': 2,
         'lazy': True,
         'port_hide_changed': set([2]),
         'posx': -239.32103672233606,
         'posy': -148.0,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   4: {  'block': False,
         'caption': 'ConfigParserOptions',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1dd8c> : "ConfigParserOptions"',
         'hide': True,
         'id': 4,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -37.577260474082721,
         'posy': 23.238328713639248,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   5: {  'block': False,
         'caption': 'ConfigParserSections',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xb566d4c> : "ConfigParserSections"',
         'hide': True,
         'id': 5,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -288.0,
         'posy': 22.03483893623843,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   6: {  'block': False,
         'caption': "'general'",
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xb6f6c2c> : "string"',
         'hide': True,
         'id': 6,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': 29.0,
         'posy': -65.0,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   7: {  'factory': '<openalea.core.node.NodeFactory object at 0xb561a8c> : "annotation"',
         'id': 7,
         'posx': -426.0,
         'posy': -364.0,
         'txt': u'This dataflow shows how to\n  * read a config file (ConfigParser module) (ReadConfigParser node)\n  * extract a list of the sections found (ConfigParseSections node)\n  * extract the options of a particular section (ConfigParserOptions node)\n\n'},
   8: {  'block': False,
         'caption': 'ConfigParserRead',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1dbac> : "ConfigParserRead"',
         'hide': True,
         'id': 8,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -275.34983720088655,
         'posy': -82.909205124023842,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   '__in__': {  'block': False,
                'caption': 'In',
                'delay': 0,
                'hide': True,
                'id': 0,
                'lazy': True,
                'port_hide_changed': set(),
                'posx': 0,
                'posy': 0,
                'priority': 0,
                'use_user_color': True,
                'user_application': None,
                'user_color': None},
   '__out__': {  'block': False,
                 'caption': 'Out',
                 'delay': 0,
                 'hide': True,
                 'id': 1,
                 'lazy': True,
                 'port_hide_changed': set(),
                 'posx': 0,
                 'posy': 0,
                 'priority': 0,
                 'use_user_color': True,
                 'user_application': None,
                 'user_color': None}},
                             elt_value={  2: [  (0, 'PackageData(vplants.plantik.config, pruning.ini)'),
         (1, 'None'),
         (2, 'None')],
   4: [],
   5: [],
   6: [(0, "'general'")],
   7: [],
   8: [],
   '__in__': [],
   '__out__': []},
                             elt_ad_hoc={  2: {  'position': [-239.32103672233606, -148.0],
         'useUserColor': False,
         'userColor': None},
   3: {  'position': [-271.8477903107389, -77.854008651658319],
         'useUserColor': False,
         'userColor': None},
   4: {  'position': [-37.577260474082721, 23.238328713639248],
         'useUserColor': False,
         'userColor': None},
   5: {  'position': [-288.0, 22.03483893623843],
         'useUserColor': False,
         'userColor': None},
   6: {  'position': [29.0, -65.0], 'useUserColor': False, 'userColor': None},
   7: {  'color': None,
         'position': [-426.0, -364.0],
         'rectP2': (722.54657255908467, 457.97545717035609),
         'text': u'This dataflow shows how to\n  * read a config file (ConfigParser module) (ReadConfigParser node)\n  * extract a list of the sections found (ConfigParseSections node)\n  * extract the options of a particular section (ConfigParserOptions node)\n\n',
         'textColor': None,
         'visualStyle': 1},
   8: {  'position': [-275.34983720088655, -82.909205124023842],
         'useUserColor': False,
         'userColor': None},
   '__in__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None},
   '__out__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None}},
                             lazy=True,
                             eval_algo='LambdaEvaluation',
                             )




ConfigParserGenerator = CompositeNodeFactory(name='ConfigParserGenerator',
                             description='',
                             category='Unclassified',
                             doc='',
                             inputs=[],
                             outputs=[],
                             elt_factory={  2: ('vplants.plantik.config', 'ConfigSectionLeaf'),
   3: ('vplants.plantik.config', 'ConfigSectionInternode'),
   4: ('vplants.plantik.config', 'ConfigSectionTropism'),
   5: ('vplants.plantik.config', 'ConfigSectionApex'),
   6: ('vplants.plantik.config', 'ConfigParserGenerator'),
   7: ('openalea.flow control', 'annotation'),
   8: ('vplants.plantik.config', 'ConfigSectionGeneral')},
                             elt_connections={  152542624: (4, 0, 6, 0),
   152542636: (2, 0, 6, 0),
   152542648: (8, 0, 6, 0),
   152542660: (4, 1, 6, 1),
   152542672: (3, 1, 6, 1),
   152542684: (5, 0, 6, 0),
   152542696: (3, 0, 6, 0),
   152542708: (2, 1, 6, 1),
   152542720: (5, 1, 6, 1),
   152542732: (8, 1, 6, 1)},
                             elt_data={  2: {  'block': False,
         'caption': 'ConfigSectionLeaf',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1dbec> : "ConfigSectionLeaf"',
         'hide': True,
         'id': 2,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': 76.736096923219804,
         'posy': -166.0,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   3: {  'block': False,
         'caption': 'ConfigSectionInternode',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xb566bac> : "ConfigSectionInternode"',
         'hide': True,
         'id': 3,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': 170.29283984802737,
         'posy': -71.389102466467364,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   4: {  'block': False,
         'caption': 'ConfigSectionTropism',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1dcec> : "ConfigSectionTropism"',
         'hide': True,
         'id': 4,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -284.0,
         'posy': -133.41136416474467,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   5: {  'block': False,
         'caption': 'ConfigSectionApex',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1db8c> : "ConfigSectionApex"',
         'hide': True,
         'id': 5,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -137.23339861739919,
         'posy': -175.15463647102138,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   6: {  'block': False,
         'caption': 'ConfigParserGenerator',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1ddac> : "ConfigParserGenerator"',
         'hide': True,
         'id': 6,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -183.0,
         'posy': 210.0,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   7: {  'factory': '<openalea.core.node.NodeFactory object at 0xb561a8c> : "annotation"',
         'id': 7,
         'posx': -461.0,
         'posy': -361.0,
         'txt': u'Each ConfigSection node return a section name and a dictionary of options/values.\n\nThe ConfigParserGenerator gather all sections and their options/values and builds up a\nproper ConfigParser instance.'},
   8: {  'block': False,
         'caption': 'ConfigSectionGeneral',
         'delay': 0,
         'factory': '<openalea.core.node.NodeFactory object at 0xbc1dbcc> : "ConfigSectionGeneral"',
         'hide': True,
         'id': 8,
         'lazy': True,
         'port_hide_changed': set(),
         'posx': -456.0,
         'posy': -176.0,
         'priority': 0,
         'use_user_color': False,
         'user_application': None,
         'user_color': None},
   '__in__': {  'block': False,
                'caption': 'In',
                'delay': 0,
                'hide': True,
                'id': 0,
                'lazy': True,
                'port_hide_changed': set(),
                'posx': 0,
                'posy': 0,
                'priority': 0,
                'use_user_color': True,
                'user_application': None,
                'user_color': None},
   '__out__': {  'block': False,
                 'caption': 'Out',
                 'delay': 0,
                 'hide': True,
                 'id': 1,
                 'lazy': True,
                 'port_hide_changed': set(),
                 'posx': 0,
                 'posy': 0,
                 'priority': 0,
                 'use_user_color': True,
                 'user_application': None,
                 'user_color': None}},
                             elt_value={  2: [  (0, "'leaf'"),
         (1, '1.0'),
         (2, '21'),
         (3, "'sigmoid'"),
         (4, "'unity'"),
         (5, 'False')],
   3: [  (0, "'internode'"),
         (1, '0.0080000000000000002'),
         (2, '10'),
         (3, 'False')],
   4: [(0, "'tropism'"), (1, 'True'), (2, '-1'), (3, '0.050000000000000003')],
   5: [  (0, "'apex'"),
         (1, '0.33333333333333331'),
         (2, '3.0'),
         (3, 'False'),
         (4, '0.20000000000000001')],
   6: [],
   7: [],
   8: [  (0, "'general'"),
         (1, 'True'),
         (2, '210'),
         (3, '5000'),
         (4, '1'),
         (5, 'False'),
         (6, 'False'),
         (7, "'test'"),
         (8, '2000'),
         (9, "'normal'"),
         (10, 'False')],
   '__in__': [],
   '__out__': []},
                             elt_ad_hoc={  2: {  'position': [76.736096923219804, -166.0],
         'useUserColor': False,
         'userColor': None},
   3: {  'position': [170.29283984802737, -71.389102466467364],
         'useUserColor': False,
         'userColor': None},
   4: {  'position': [-284.0, -133.41136416474467],
         'useUserColor': False,
         'userColor': None},
   5: {  'position': [-137.23339861739919, -175.15463647102138],
         'useUserColor': False,
         'userColor': None},
   6: {  'position': [-183.0, 210.0], 'useUserColor': False, 'userColor': None},
   7: {  'color': None,
         'position': [-461.0, -361.0],
         'rectP2': (888.50016041065123, 641.22313121591276),
         'text': u'Each ConfigSection node return a section name and a dictionary of options/values.\n\nThe ConfigParserGenerator gather all sections and their options/values and builds up a\nproper ConfigParser instance.',
         'textColor': None,
         'visualStyle': 1},
   8: {  'position': [-456.0, -176.0], 'useUserColor': False, 'userColor': None},
   '__in__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None},
   '__out__': {  'position': [0, 0], 'useUserColor': True, 'userColor': None}},
                             lazy=True,
                             eval_algo='LambdaEvaluation',
                             )




